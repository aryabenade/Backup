//prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// model Pet {
//   id               Int               @id @default(autoincrement())
//   name             String
//   age              Int
//   ageUnit          String
//   petType          String
//   petBreed         String
//   state            String
//   city             String
//   contact          String
//   image            String?
//   userId           String
//   createdAt        DateTime          @default(now())  // Add this line
//   adoptionRequests AdoptionRequest[]
//   notifications    Notification[]
//   favorites        Favorite[]
// }

model Pet {
  id               Int               @id @default(autoincrement())
  name             String
  age              Int
  ageUnit          String
  petType          String
  petBreed         String
  state            String
  city             String
  contact          String
  image            String?           // Nullable if no image is uploaded
  userId           String
  gender           String            // 'Male' or 'Female'
  isVaccinated     Boolean
  shotsUpToDate    String?           // Nullable if not vaccinated
  isNeutered       Boolean?          // Nullable for non-dogs
  isSpayed         Boolean?          // Nullable for non-cats
  goodWithDogs     Boolean?          // Nullable
  goodWithCats     Boolean?          // Nullable
  goodWithKids     Boolean?          // Nullable
  reasonForRehoming String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  adoptionRequests AdoptionRequest[]
  notifications    Notification[]
  favorites        Favorite[]
}

model WalkingBooking {
  id             Int      @id @default(autoincrement())
  name           String
  phoneNumber    String
  email          String
  startDate      DateTime
  endDate        DateTime
  timeSlot       String   // e.g., "7:00 AM - 8:00 AM"
  daysOfWeek     String   // e.g., "Mon,Tue,Wed"
  walkDuration   String   // "30 mins", "1 hour"
  petType        String   // "Dog"
  petName        String
  petBreed       String
  petGender      String
  energyLevel    String   // "Low", "Medium", "High"
  leashBehavior  String   // "Good", "Pulls", "Needs Work"
  petAge         String
  city           String
  address        String
  totalWalks     Int      // Calculated based on schedule
  walksCompleted Int      @default(0)
  totalCost      String   // e.g., "â‚¹3000"
  status         String   @default("Scheduled")
  userId         String
  packageTitle   String   // e.g., "30-Minute Walks" or "1-Hour Walks"
}

model AdoptionRequest {
  id                  Int      @id @default(autoincrement())
  petId               Int
  adopterId           String
  fullName            String
  phoneNumber         String
  emailAddress        String
  residenceType       String
  state               String
  city                String
  profileImage        String?
  reasonForAdoption   String   // New field
  hasOtherPets        Boolean  // New field
  otherPetsDescription String? // New field, optional
  canCoverCosts       Boolean  // New field
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  pet Pet @relation(fields: [petId], references: [id])
}

model GroomingBooking {
  id            Int      @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String
  date          DateTime
  timeSlot      String
  petType       String
  petName       String
  petBreed      String
  petGender     String
  petSize       String
  petAggression String
  petAge        String
  city          String
  address       String
  packageTitle  String
  packagePrice  String
  status        String   @default("Scheduled")
  userId        String // Add this field to store the user's ID
  
}

model VetBooking {
  id               Int      @id @default(autoincrement())
  name             String
  phoneNumber      String
  email            String
  date             DateTime
  timeSlot         String
  consultationType String
  petType          String
  petIssues        String
  medicalAttention String
  city             String
  address          String
  packageTitle     String
  packagePrice     String
  status           String   @default("Scheduled")
  userId           String // Add this field to store the user's ID
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    String
  petId     Int
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  pet       Pet      @relation(fields: [petId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    String // Clerk user ID
  petId     Int
  createdAt DateTime @default(now())

  pet Pet @relation(fields: [petId], references: [id])
}

model TrainingBooking {
  id               Int      @id @default(autoincrement())
  name             String
  phoneNumber      String
  email            String
  startDate        DateTime
  preferredDays    String
  petType          String
  petName          String
  petBreed         String
  petGender        String
  petSize          String
  petAggression    String
  petAge           String
  city             String
  address          String
  packageTitle     String
  packagePrice     String
  status           String   @default("Scheduled")
  userId           String
  sessionsPerWeek  Int      // New field
  sessionsCompleted Int     @default(0) // New field
}