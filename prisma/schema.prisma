//prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pet {
  id               Int               @id @default(autoincrement())
  name             String
  age              Int
  ageUnit          String
  petType          String
  petBreed         String
  state            String
  city             String
  contact          String
  image            String?
  userId           String // Store Clerk user ID
  adoptionRequests AdoptionRequest[] // Inverse relation
  notifications    Notification[] // Inverse relation
  // favorites        Favorite[] // Inverse relation
}

model AdoptionRequest {
  id            Int      @id @default(autoincrement())
  petId         Int
  adopterId     String
  fullName      String
  phoneNumber   String
  emailAddress  String
  residenceType String
  state         String
  city          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  pet Pet @relation(fields: [petId], references: [id])
}

model GroomingBooking {
  id            Int      @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String
  date          DateTime
  timeSlot      String
  petType       String
  petName       String
  petBreed      String
  petGender     String
  petSize       String
  petAggression String
  petAge        String
  city          String
  address       String
  packageTitle  String
  packagePrice  String
  status        String   @default("Scheduled")
  userId        String // Add this field to store the user's ID
  
}

model VetBooking {
  id               Int      @id @default(autoincrement())
  name             String
  phoneNumber      String
  email            String
  date             DateTime
  timeSlot         String
  consultationType String
  petType          String
  petIssues        String
  medicalAttention String
  city             String
  address          String
  packageTitle     String
  packagePrice     String
  status           String   @default("Scheduled")
  userId           String // Add this field to store the user's ID
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    String
  petId     Int
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  pet       Pet      @relation(fields: [petId], references: [id])
}

// model Favorite {
//   id        Int      @id @default(autoincrement())
//   userId    String // Clerk user ID
//   petId     Int
//   createdAt DateTime @default(now())

//   pet Pet @relation(fields: [petId], references: [id])
// }